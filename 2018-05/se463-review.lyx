#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage[margin=2cm, bottom=3cm]{geometry}
\usepackage[thickqspace,thickspace,amssymb]{SIunits}
\usepackage{enumitem}
\usepackage{listings}
\usepackage{tkz-graph}
\setlist{itemsep=0pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
How to not fail SE 463
\end_layout

\begin_layout Author
Jim Zhang
\end_layout

\begin_layout Date
2018 Spring
\end_layout

\begin_layout Section
Main course content
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Most software projects fail, not because some phony design or code's blessing,
 but because, they did not make something users want.
\end_layout

\begin_layout Standard
Requirements are hard when they are vague, ambiguous, changing, incomplete,
 infeasible, made with insufficient user input, or plain wrong.
\end_layout

\begin_layout Subsubsection
Types of systems
\end_layout

\begin_layout Standard
There's an icon corresponding to each one that is apparently plastered on
 every slide it applies to.
\end_layout

\begin_layout Itemize

\series bold
Greenfield
\series default
 vs.
 
\series bold
brownfield
\end_layout

\begin_layout Itemize

\series bold
Customer-driven
\series default
 vs.
 
\series bold
market-driven
\end_layout

\begin_layout Itemize

\series bold
Web/mobile
\series default
 vs.
 
\series bold
enterprise
\series default
 vs.
 
\series bold
infrastructure
\series default
 vs.
 
\series bold
safety critical
\end_layout

\begin_layout Itemize

\series bold
In-house
\series default
 vs.
 
\series bold
outsourced
\end_layout

\begin_layout Subsection
The lean business model
\end_layout

\begin_layout Standard
Constantly iterate in all stages of development.
\end_layout

\begin_layout Subsubsection
Lean canvas model
\end_layout

\begin_layout Standard
For the purposes of this course, ignore 
\begin_inset Quotes eld
\end_inset

cost structure
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

revenue streams
\begin_inset Quotes erd
\end_inset

.
 Fill out in order: Outer, middle, NW, SE, SW, NE.
 Practice filling one of these out.
\end_layout

\begin_layout Subsection
Hypothesis testing
\end_layout

\begin_layout Standard
Form hypotheses that are 
\series bold
testable
\series default
 as well as 
\series bold
clearly falsifiable
\series default
.
\end_layout

\begin_layout Subsubsection
Risks
\end_layout

\begin_layout Standard

\series bold
Customer risk
\series default
 is 
\begin_inset Quotes eld
\end_inset

who has the pain?
\begin_inset Quotes erd
\end_inset

.
 
\series bold
Product risk
\series default
 is 
\begin_inset Quotes eld
\end_inset

what problem are you solving?
\begin_inset Quotes erd
\end_inset

.
 
\series bold
Market risk
\series default
 is 
\begin_inset Quotes eld
\end_inset

who is the competition?
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Problem interview
\end_layout

\begin_layout Standard
Consists of these stages:
\end_layout

\begin_layout Itemize
Welcome
\end_layout

\begin_layout Itemize
Collect demographics
\end_layout

\begin_layout Itemize
Tell a story
\end_layout

\begin_layout Itemize
Problem ranking
\end_layout

\begin_layout Itemize
Explore customer's worldview
\end_layout

\begin_layout Itemize
Wrap up
\end_layout

\begin_layout Itemize
Document results
\end_layout

\begin_layout Subsection
Stakeholders
\end_layout

\begin_layout Standard
A stakeholder is anyone who will be affected by the project.
 Types of stakeholders:
\end_layout

\begin_layout Itemize
The 
\series bold
champion/owner
\series default
 is the stakeholder paying for the software to be made.
\end_layout

\begin_layout Itemize
The 
\series bold
customer
\series default
 buys the software after it is made.
\end_layout

\begin_layout Itemize

\series bold
Users
\series default
 interact with the software.
\end_layout

\begin_layout Itemize
The 
\series bold
domain expert
\series default
 is very familiar with the problem to be solved.
\end_layout

\begin_layout Itemize
The 
\series bold
software engineer
\series default
 develops the product and makes sure it's feasible.
\end_layout

\begin_layout Itemize

\series bold
Negative stakeholders
\series default
 want you to fail.
\end_layout

\begin_layout Itemize

\series bold
Disfavored users
\series default
 should have have access to the system.
\end_layout

\begin_layout Subsubsection
Personas
\end_layout

\begin_layout Standard
Fake users with heavily detailed stories and a moniker like 
\begin_inset Quotes eld
\end_inset

Ken the Keener
\begin_inset Quotes erd
\end_inset

, used to understand a user class.
 Can be data-driven.
\end_layout

\begin_layout Subsection
User requirements
\end_layout

\begin_layout Standard

\series bold
User requirements
\series default
 are things that users want to be able to do.
 A 
\series bold
use case
\series default
 is a vertical slice of end-to-end functionality.
\end_layout

\begin_layout Subsubsection
Use case diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename se463-review/use-case-diagram.png
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
Primary actors on the left, supporting actors on the right, and all your
 use cases in circles in a nice big box in the center.
 Can use actor generalization (UML inheritance).
 Can also «include» sub-use cases, or «extend» existing use cases, but do
 it sparingly\SpecialChar endofsentence

\end_layout

\begin_layout Subsubsection
User stories
\end_layout

\begin_layout Standard
Short stories written in the format 
\begin_inset Quotes eld
\end_inset

As a ROLE, I want THING so that BENEFIT
\begin_inset Quotes erd
\end_inset

.
 Three C's are Card (that format), Conversation (you should have one), and
 Confirmations (you should have objective acceptance criteria).
 This produces user requirements from which you can derive 
\series bold
conditions of satisfaction
\series default
, which are functional requirements.
\end_layout

\begin_layout Subsubsection
Changing requirements
\end_layout

\begin_layout Standard
When user requirements try to change, keep in mind
\end_layout

\begin_layout Enumerate
Your requirements baseline
\end_layout

\begin_layout Enumerate
Your unique value proposition
\end_layout

\begin_layout Enumerate
Project scope
\end_layout

\begin_layout Standard
And accordingly prioritize user requests.
\end_layout

\begin_layout Subsection
Workflow models
\end_layout

\begin_layout Standard
A 
\series bold
workflow
\series default
 is a series of tasks that accomplish some use case.
\end_layout

\begin_layout Subsubsection
Scenario
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename se463-review/scenarios-and-exceptions.png
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
A 
\series bold
scenario
\series default
 is a full execution path through a use case, listing only observable actions.
 They are drawn as a table where columns are the actors/systems and rows
 are time.
 Actions can have If, For, While, or Go To 
\begin_inset Formula $UC_{n}$
\end_inset

 but those are signs that you're making the scenario too detailed.
 
\series bold
Alternatives
\series default
 are sub-use cases where the same thing is achieved but the sequence of
 actions is different.
 
\series bold
Exceptions
\series default
 are sub-use cases that are unwanted deviations.
 Both start off somewhere in the main use case flow.
\end_layout

\begin_layout Subsubsection
Activity diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename se463-review/activity-diagram.png
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
An 
\series bold
activity diagram
\series default
 describes control flow from one activity to another.
\end_layout

\begin_layout Subsubsection
Dataflow diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename se463-review/dataflow-diagram.png
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
A 
\series bold
dataflow diagram
\series default
 shows functional and data dependencies between functions.
 Notably, data stores are represented by an over/under bar.
\end_layout

\begin_layout Subsection
MVP hypothesis testing
\end_layout

\begin_layout Standard
To assess customer risk (who has the pain?) and product risk (how will you
 fix it?), conduct a 
\series bold
solution interview
\series default
:
\end_layout

\begin_layout Enumerate

\series bold
Welcome
\series default
.
 Describe the rest of the interview.
\end_layout

\begin_layout Enumerate

\series bold
Collect demographics
\series default
 — particularly, those numbers relevant to your project.
\end_layout

\begin_layout Enumerate

\series bold
Tell a story
\series default
 about the problem you're trying to solve and ask if it resonates with them.
\end_layout

\begin_layout Enumerate

\series bold
Demo
\series default
 your solution to each problem.
\end_layout

\begin_layout Enumerate

\series bold
Wrap up
\series default
 — ask if they want to see the product, and ask for leads.
\end_layout

\begin_layout Subsection
Elicitation
\end_layout

\begin_layout Standard

\series bold
Elicitation
\series default
 is getting requirements.
 There are four types of it:
\end_layout

\begin_layout Itemize

\series bold
Artifact-based elicitation
\series default
, where you study documentation and the domain without involving stakeholders.
\end_layout

\begin_layout Itemize

\series bold
Stakeholder-based elicitation
\series default
, where you interview, survey, or observe stakeholders.
 Examples: Interviews, observation, personas, apprenticeship.
\end_layout

\begin_layout Itemize

\series bold
Model-based elicitation
\series default
, where you express existing requirements in a different language.
 Examples: Modelling, mockups and prototypes, pilot experiments.
\end_layout

\begin_layout Itemize

\series bold
Creativity-based elicitation
\series default
, where you invent undreamt requirements.
 Examples: Systemic thinking, brainstorming, creativity workshop, constraint
 relaxation
\end_layout

\begin_layout Standard
A 
\series bold
requirements taxonomy
\series default
 is a tree of requirements.
\end_layout

\begin_layout Subsection
Domain models
\end_layout

\begin_layout Standard

\series bold
Domain models
\series default
 are simplified UML class diagrams that model the environment.
 Classes should have attributes and associations, and multiplicities on
 all associations.
\end_layout

\begin_layout Subsection
Prototyping
\end_layout

\begin_layout Standard
Four types of prototypes.
 We particularly care about the first two.
\end_layout

\begin_layout Itemize

\series bold
Presentation prototypes
\series default
 are throwaway proofs of concept used for explaining design features.
\end_layout

\begin_layout Itemize

\series bold
Exploratory prototypes
\series default
 are throwaway prototypes that determine problems.
\end_layout

\begin_layout Itemize

\series bold
Experimental prototypes
\series default
 (breadboards) explore technical feasibility.
\end_layout

\begin_layout Itemize

\series bold
Evolutionary prototypes
\series default
 improve upon an existing system.
\end_layout

\begin_layout Standard
Users tend to read pages in an 
\series bold
F-layout
\series default
.
\end_layout

\begin_layout Subsubsection
SPRINT kickoff
\end_layout

\begin_layout Standard
Decide on a Facilitator and a Decider.
 No devices in the room.
 Five-day schedule:
\end_layout

\begin_layout Itemize
Monday: 
\series bold
Map
\series default
 existing workflow and find problems with it.
\end_layout

\begin_layout Itemize
Tuesday: 
\series bold
Sketch
\series default
 ideas on sticky notes alone.
\end_layout

\begin_layout Itemize
Wednesday: 
\series bold
Decide
\series default
 on winning and turn them into a storyboard.
\end_layout

\begin_layout Itemize
Thursday: 
\series bold
Prototype
\series default
 a facade using lots of human actors.
\end_layout

\begin_layout Itemize
Friday: 
\series bold
Test
\series default
 your stuff on users (five is enough to reveal patterns).
\end_layout

\begin_layout Subsection
Quality requirements
\end_layout

\begin_layout Standard

\series bold
Quality requirements
\series default
 constrain a solution beyond functionality.
 They include performance, reliability, robustness, adaptability, security,
 usability, scalability, efficiency/capacity, and accuracy/precision.
 
\series bold
Motherhood
\series default
 requirements are those that are general and always desirable, like 
\begin_inset Quotes eld
\end_inset

reliable
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

user-friendly
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

maintainable
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Fit criteria
\end_layout

\begin_layout Standard
A 
\series bold
fit criterion
\series default
 quantifies the extent to which a quality requirement must be met; e.g.
 
\begin_inset Quotes eld
\end_inset

no more than 5 minutes per year
\begin_inset Quotes erd
\end_inset

.
 
\series bold
Richer fit criteria
\series default
 additionally have a minimum and outstanding quantity.
\end_layout

\begin_layout Subsection
Prioritizing requirements
\end_layout

\begin_layout Standard
You can prioritize requirements by attempting to quantify their value and
 cost and ordering them by value/cost ratio.
 Typically you'll want to group the requirements into priority groups like
 Critical, Standard, and Optional.
 Here are some techniques.
\end_layout

\begin_layout Subsubsection
100-dollar test
\end_layout

\begin_layout Standard
Give stakeholders 100 dollars to distribute among the requirements.
\end_layout

\begin_layout Subsubsection
Kano model
\end_layout

\begin_layout Standard
In order of most to least important:
\end_layout

\begin_layout Itemize
Performance: Stuff customer asked for
\end_layout

\begin_layout Itemize
Basic: Stuff customer takes for granted
\end_layout

\begin_layout Itemize
Excitement: Stuff customer would be pleasantly surprised by
\end_layout

\begin_layout Itemize
Indifferent: Stuff customer doesn't care about
\end_layout

\begin_layout Subsubsection
Kano survey
\end_layout

\begin_layout Standard
Ask customers how they would feel with/without a requirement, giving them
 the choices 
\begin_inset Quotes eld
\end_inset

I like it
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

I expect it
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

I'm neutral
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

I can tolerate it
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

I dislike it
\begin_inset Quotes erd
\end_inset

.
 Use the Kano Evaluation Table to figure out where in the model the requirement
 fits.
\end_layout

\begin_layout Subsubsection
Categorization plane
\end_layout

\begin_layout Standard
Assign weights of 
\begin_inset Formula $-2$
\end_inset

, 
\begin_inset Formula $-1$
\end_inset

, 
\begin_inset Formula $0$
\end_inset

, 
\begin_inset Formula $2$
\end_inset

, and 
\begin_inset Formula $4$
\end_inset

 to customer responses.
 Results in the four quadrants of 
\begin_inset Formula $[0,4]^{2}$
\end_inset

 corresponding to Indifferent, Basic, Performance, and Excitement.
\end_layout

\begin_layout Subsubsection
Analytic hierarchy process
\end_layout

\begin_layout Standard
Get stakeholder to compare all pairs of requirements and assign values of
 
\begin_inset Formula $1,3,5,7,9$
\end_inset

 depending on how much more one is preferred over the other.
 Put this in a matrix, then do AHP analysis by normalizing columns, taking
 row sums, and normalizing those — this is your priority vector, and tells
 you exactly how much goodness is in each requirement.
\end_layout

\begin_layout Standard
To check consistency, multiply the original matrix by the priority vector,
 pointwise divide by the priority vector, average the elements, calculate
 the consistency index, and compare that with the consistency index of the
 appropriately sized random matrix.
\end_layout

\begin_layout Subsection
Risk management
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $X$
\end_inset

 be a risk, 
\begin_inset Formula $P(X)$
\end_inset

 be the chance of it, and 
\begin_inset Formula $C(X)$
\end_inset

 be the cost of it.
 Then,
\begin_inset Formula 
\begin{align*}
Risk\:Exposure(X) & =P(X)C(X)
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection
Risk consequence table
\end_layout

\begin_layout Standard
Risks and their likelihood along the top.
 Requirements and their weights along the left.
 Fill in centre with impacts (estimates of the effect of the risk on the
 requirement).
 This lets you compute
\end_layout

\begin_layout Standard
Loss of Objective for a requirement as the risk of the requirement 
\begin_inset Formula $\times$
\end_inset

 SUMPRODUCT(likelihoods, impacts for requirement) and Risk Criticality of
 a risk as the likelihood of the risk 
\begin_inset Formula $\times$
\end_inset

 SUMPRODUCT(weights, impacts for risk).
\end_layout

\begin_layout Subsubsection
Risk countermeasures table
\end_layout

\begin_layout Standard
Risks and their criticalities along the top.
 Countermeasures along left.
 Fill in centre with effects (estimate of reduction on risk).
 This lets you compute the Overall Single Effect of Countermeasure of a
 countermeasure as SUMPRODUCT(criticalities, effect of countermeasure) and
 Combined Risk Reduction of a risk as 
\begin_inset Formula $1-\prod(1-\text{effects for risk})$
\end_inset

.
\end_layout

\begin_layout Subsection
Specifications
\end_layout

\begin_layout Standard
Separate the world into the 
\series bold
environment
\series default
, the 
\series bold
interface
\series default
, and the 
\series bold
system
\series default
.

\series bold
 
\series default
A 
\series bold
requirement
\series default
 is a desired change to the world.
 The system can only interact with the world through the interface; it cannot
 touch the environment directly.
 A 
\series bold
specification
\series default
 describes how the system should behave in terms of interface phenomena.
 Ideally, Spec 
\begin_inset Formula $\models$
\end_inset

 Req, but in order to show that we usually need to make assumptions about
 how the environment behaves (Dom 
\begin_inset Formula $\subseteq$
\end_inset

 Env such that Dom, Spec 
\begin_inset Formula $\models$
\end_inset

 Req).
\end_layout

\begin_layout Subsubsection
Domain models for specs and reqs
\end_layout

\begin_layout Standard
Reqs domain model doesn't have to include «interface»s or system components.
 Specs domain model does, and system should interact only with other parts
 of the system and with «interface» phenomena.
\end_layout

\begin_layout Subsection
Business rules and OCL
\end_layout

\begin_layout Standard
A 
\series bold
business rule
\series default
 constraints something.
 We can use OCL, Object Constraint Language, to model these.
 You just gotta know it.
\end_layout

\begin_layout Subsection
Conflict resolution
\end_layout

\begin_layout Itemize

\series bold
Data conflict
\series default
: Different understandings of an issue
\end_layout

\begin_layout Itemize

\series bold
Interest conflict
\series default
: Stakeholders have different goals
\end_layout

\begin_layout Itemize

\series bold
Value conflict
\series default
: Stakeholders have different preferences
\end_layout

\begin_layout Subsection
Behavior modeling
\end_layout

\begin_layout Standard
Know FSMs, including hierarchy, (deep) history, concurrency, termination,
 state actions, and activities.
 Also know 
\series bold
navigation diagrams
\series default
, which are just state machines for screens of an app.
\end_layout

\begin_layout Subsection
Temporal logic
\end_layout

\begin_layout Standard
It's predicate logic but your variables are functions of time.
\end_layout

\begin_layout Subsubsection
LTL
\end_layout

\begin_layout Standard
It's predicate logic with some additions for modelling time.
 The connectives are:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\Box$
\end_inset

 (henceforth)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\diamond$
\end_inset

 (eventually)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\circ$
\end_inset

 (next state)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathcal{U}$
\end_inset

 (until)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathcal{W}$
\end_inset

 (unless)
\end_layout

\begin_layout Standard
Practice using them, and practice using them to describe FSMs.
\end_layout

\begin_layout Subsection
Software estimation
\end_layout

\begin_layout Standard
Estimation error occurs from uncertainty, omitted activities, optimism,
 bias, and subjectivity.
 You can estimate in a couple ways.
\end_layout

\begin_layout Subsubsection
By analogy
\end_layout

\begin_layout Standard
Compare a new project to an old project, and extrapolate from historical
 data.
\end_layout

\begin_layout Subsubsection
Function point analysis
\end_layout

\begin_layout Standard
Estimate function points (arbitrary units of code), derive code size from
 that, and estimate resources from code size.
 Function points are counted by taking into account external inputs/outputs/quer
ies, internal files, and external interfaces of low, medium, and high complexity
, and putting it in a chart.
 Code size is done by standard SLOC/FP tables.
 PERT lets you compute expected case in a terrible way:
\begin_inset Formula 
\[
Expected=\frac{Best+4\times MostLikely+Worst}{6}
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Confidence intervals
\end_layout

\begin_layout Standard
Once you have best, expected, and worst case effort estimates, you can estimate
 the standard deviation by taking 
\begin_inset Formula $(worst-best)/P$
\end_inset

 for each use case, where 
\begin_inset Formula $P=6$
\end_inset

 if you're 
\begin_inset Formula $99.7\%$
\end_inset

 confident in your estimate range and less if you're realistic.
 Then compute variance for each use case, add 'em up, and square root to
 get a standard deviation for your entire project.
 Then it's just a matter of assuming your project finish time is normally
 distributed and just consult a standard deviation table.
\end_layout

\begin_layout Section
Guest lectures
\end_layout

\begin_layout Subsection
Shyam Sheth
\end_layout

\begin_layout Standard
Users that are less committed to their current solution are easier to get.
\end_layout

\begin_layout Subsection
Robyn Lutz
\end_layout

\begin_layout Standard
Requirements engineering was used to decide to use a molecular watchdog
 timer to monitor for events in a DNA nanosystem.
 In fact, requirements engineering is useful for lots of safety-critical
 applications.
\end_layout

\begin_layout Subsection
James Corr
\end_layout

\begin_layout Standard
Made his consultancy a lot more successful by giving clients a big requirements
 doc and spending some time collecting requirements.
\end_layout

\end_body
\end_document
